// <auto-generated />
using System;
using ExchangeDocument.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExchangeDocument.Migrations
{
    [DbContext(typeof(ExchangeDocumentContext))]
    [Migration("20250606024256_ReviewRefactor")]
    partial class ReviewRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK__categori__23CAF1D81CED1810");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__categori__37077ABD5AD55994")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("documentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("author");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Edition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("edition");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int")
                        .HasColumnName("publicationYear");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("statusId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("DocumentId")
                        .HasName("PK__document__EFAAAD85262EE6A7");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Listing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("listingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("documentId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("ListingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<int>("ListingType")
                        .HasColumnType("int")
                        .HasColumnName("listingType");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("ownerId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.HasKey("ListingId")
                        .HasName("PK_Listings");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Listings_CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Listings_IsDeleted");

                    b.HasIndex("ListingStatusId")
                        .HasDatabaseName("IX_Listings_ListingStatusId");

                    b.HasIndex("OwnerId", "ListingStatusId")
                        .HasDatabaseName("IX_listings_ownerId_statusId");

                    b.ToTable("listings", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ListingExchangeItem", b =>
                {
                    b.Property<int>("ExchangeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exchangeItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeItemId"));

                    b.Property<int>("DesiredDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("desiredDocumentId");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("listingId");

                    b.HasKey("ExchangeItemId")
                        .HasName("PK_ListingExchangeItems");

                    b.HasIndex("DesiredDocumentId");

                    b.HasIndex("ListingId");

                    b.ToTable("listingExchangeItems", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ListingPaymentMethod", b =>
                {
                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("listingId");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.HasKey("ListingId", "PaymentMethodId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("listingPaymentMethods", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("buyerId");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cancellationReason");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("orderDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.Property<string>("ProofImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("proofImageUrl");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejectionReason");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowVersion");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("sellerId");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("shippingAddress");

                    b.Property<string>("ShippingProvider")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("shippingProvider");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("totalAmount");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("trackingNumber");

                    b.HasKey("OrderId")
                        .HasName("PK__orders__0809335D8C96FDD5");

                    b.HasIndex("OrderDate");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("BuyerId", "OrderStatusId")
                        .HasDatabaseName("IX_orders_buyerId_statusId");

                    b.HasIndex("SellerId", "OrderStatusId")
                        .HasDatabaseName("IX_orders_sellerId_statusId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(29, 2)")
                        .HasColumnName("amount")
                        .HasComputedColumnSql("([priceAtOrderTime]*[quantity])");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("documentId");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("listingId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<decimal>("PriceAtOrderTime")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("priceAtOrderTime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowVersion");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__orderDet__E4FEDE4AE6141E30");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ListingId");

                    b.HasIndex("OrderId");

                    b.ToTable("orderDetails", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("paymentDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("paymentStatusId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowVersion");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("transactionId");

                    b.HasKey("PaymentId")
                        .HasName("PK__payments__A0D9EFC6903F7ADB");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex(new[] { "OrderId" }, "UQ__payments__0809335CA88D5F23")
                        .IsUnique();

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("paymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = true,
                            Name = "COD"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = true,
                            Name = "BankTransfer"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = true,
                            Name = "OnlineGateway"
                        });
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit")
                        .HasColumnName("isEdited");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastEditedDate");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("reviewDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("ReviewType")
                        .HasColumnType("int")
                        .HasColumnName("reviewType");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("reviewerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowVersion");

                    b.HasKey("ReviewId")
                        .HasName("PK_review");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ReviewEvidence", b =>
                {
                    b.Property<int>("ReviewEvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewEvidenceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewEvidenceId"));

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fileType");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fileUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("reviewId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowVersion");

                    b.Property<DateTime>("UploadedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("uploadedDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("ReviewEvidenceId")
                        .HasName("PK_review_evidences");

                    b.HasIndex("ReviewId");

                    b.ToTable("review_evidences", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__roles__CD98462A6EE9A78E");

                    b.HasIndex(new[] { "RoleName" }, "UQ__roles__B1947861244D93DE")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("statusCode");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("statusName");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sortOrder");

                    b.HasKey("StatusId")
                        .HasName("PK_SystemStatus");

                    b.HasIndex("Domain", "Code")
                        .IsUnique()
                        .HasDatabaseName("UQ_SystemStatus_Domain_Code");

                    b.ToTable("systemStatus", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Code = "InStock",
                            Domain = "Document",
                            Name = "In Stock",
                            SortOrder = 1
                        },
                        new
                        {
                            StatusId = 2,
                            Code = "Listed",
                            Domain = "Document",
                            Name = "Listed",
                            SortOrder = 2
                        },
                        new
                        {
                            StatusId = 3,
                            Code = "PendingSale",
                            Domain = "Document",
                            Name = "Pending Sale",
                            SortOrder = 3
                        },
                        new
                        {
                            StatusId = 4,
                            Code = "Sold",
                            Domain = "Document",
                            Name = "Sold",
                            SortOrder = 4
                        },
                        new
                        {
                            StatusId = 5,
                            Code = "Cancelled",
                            Domain = "Document",
                            Name = "Cancelled",
                            SortOrder = 5
                        },
                        new
                        {
                            StatusId = 6,
                            Code = "Pending",
                            Domain = "Listing",
                            Name = "Pending",
                            SortOrder = 1
                        },
                        new
                        {
                            StatusId = 7,
                            Code = "Active",
                            Domain = "Listing",
                            Name = "Active",
                            SortOrder = 2
                        },
                        new
                        {
                            StatusId = 8,
                            Code = "Rejected",
                            Domain = "Listing",
                            Name = "Rejected",
                            SortOrder = 3
                        },
                        new
                        {
                            StatusId = 22,
                            Code = "Reserved",
                            Domain = "Listing",
                            Name = "Reserved",
                            SortOrder = 4
                        },
                        new
                        {
                            StatusId = 23,
                            Code = "Sold",
                            Domain = "Listing",
                            Name = "Sold",
                            SortOrder = 5
                        },
                        new
                        {
                            StatusId = 9,
                            Code = "PendingSellerConfirmation",
                            Domain = "Order",
                            Name = "Pending Seller Confirmation",
                            SortOrder = 1
                        },
                        new
                        {
                            StatusId = 10,
                            Code = "ConfirmedBySeller",
                            Domain = "Order",
                            Name = "Confirmed By Seller",
                            SortOrder = 2
                        },
                        new
                        {
                            StatusId = 11,
                            Code = "AwaitingOfflinePayment",
                            Domain = "Order",
                            Name = "Awaiting Offline Payment",
                            SortOrder = 3
                        },
                        new
                        {
                            StatusId = 12,
                            Code = "PaymentConfirmed",
                            Domain = "Order",
                            Name = "Payment Confirmed",
                            SortOrder = 4
                        },
                        new
                        {
                            StatusId = 13,
                            Code = "Shipped",
                            Domain = "Order",
                            Name = "Shipped",
                            SortOrder = 5
                        },
                        new
                        {
                            StatusId = 14,
                            Code = "Delivered",
                            Domain = "Order",
                            Name = "Delivered",
                            SortOrder = 6
                        },
                        new
                        {
                            StatusId = 15,
                            Code = "Completed",
                            Domain = "Order",
                            Name = "Completed",
                            SortOrder = 7
                        },
                        new
                        {
                            StatusId = 16,
                            Code = "CancelledByBuyer",
                            Domain = "Order",
                            Name = "Cancelled By Buyer",
                            SortOrder = 8
                        },
                        new
                        {
                            StatusId = 17,
                            Code = "CancelledBySeller",
                            Domain = "Order",
                            Name = "Cancelled By Seller",
                            SortOrder = 9
                        },
                        new
                        {
                            StatusId = 18,
                            Code = "RejectedBySeller",
                            Domain = "Order",
                            Name = "Rejected By Seller",
                            SortOrder = 10
                        },
                        new
                        {
                            StatusId = 24,
                            Code = "PendingShipment",
                            Domain = "Order",
                            Name = "Pending Shipment",
                            SortOrder = 5
                        },
                        new
                        {
                            StatusId = 19,
                            Code = "Succeeded",
                            Domain = "Payment",
                            Name = "Succeeded",
                            SortOrder = 1
                        },
                        new
                        {
                            StatusId = 20,
                            Code = "Failed",
                            Domain = "Payment",
                            Name = "Failed",
                            SortOrder = 2
                        },
                        new
                        {
                            StatusId = 21,
                            Code = "Pending",
                            Domain = "Payment",
                            Name = "Pending",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("roleId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId")
                        .HasName("PK__users__CB9A1CFFCF587D49");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616450D264B5")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Userprofile", b =>
                {
                    b.Property<int>("UserprofileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userprofileId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserprofileId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("datetime")
                        .HasColumnName("birth");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("UserprofileId")
                        .HasName("PK__userprof__CCABE6BFE822A043");

                    b.HasIndex(new[] { "UserId" }, "UQ__userprof__CB9A1CFE701C0233")
                        .IsUnique();

                    b.ToTable("userprofiles", (string)null);
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Document", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Category", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__document__catego__48CFD27E");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", "SystemStatus")
                        .WithMany("Documents")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_SystemStatus");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__document__userId__47DBAE45");

                    b.Navigation("Category");

                    b.Navigation("SystemStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Listing", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_Listings_Document");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", "SystemStatus")
                        .WithMany("Listings")
                        .HasForeignKey("ListingStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Listings_SystemStatus");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Listings_User");

                    b.Navigation("Document");

                    b.Navigation("Owner");

                    b.Navigation("SystemStatus");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ListingExchangeItem", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Document", "DesiredDocument")
                        .WithMany()
                        .HasForeignKey("DesiredDocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_ListingItems_Document");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Listing", "Listing")
                        .WithMany("ExchangeItems")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK_ListingItems_Listing");

                    b.Navigation("DesiredDocument");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ListingPaymentMethod", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Listing", "Listing")
                        .WithMany("ListingPaymentMethods")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ListingPaymentMethod_Listing");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ListingPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ListingPaymentMethod_PaymentMethod");

                    b.Navigation("Listing");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Notification", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_User");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_SystemStatus");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Seller_User");

                    b.Navigation("Buyer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Document", "Document")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK__orderDeta__docum__59063A47");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Listing");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__orderDeta__order__5812160E");

                    b.Navigation("Document");

                    b.Navigation("Listing");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Payment", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("ExchangeDocument.DataAccessLayer.Entities.Payment", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__payments__orderI__5EBF139D");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_PaymentMethod");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_SystemStatus");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Review", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Order", "Order")
                        .WithOne("Review")
                        .HasForeignKey("ExchangeDocument.DataAccessLayer.Entities.Review", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Order");

                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_User");

                    b.Navigation("Order");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.ReviewEvidence", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Review", "Review")
                        .WithMany("Evidences")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReviewEvidences_Review");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Userprofile", b =>
                {
                    b.HasOne("ExchangeDocument.DataAccessLayer.Entities.User", "User")
                        .WithOne("Userprofile")
                        .HasForeignKey("ExchangeDocument.DataAccessLayer.Entities.Userprofile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__userprofi__userI__403A8C7D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Document", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Listing", b =>
                {
                    b.Navigation("ExchangeItems");

                    b.Navigation("ListingPaymentMethods");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Navigation("ListingPaymentMethods");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Review", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.SystemStatus", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("ExchangeDocument.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Orders");

                    b.Navigation("Userprofile");
                });
#pragma warning restore 612, 618
        }
    }
}
